[tool.poetry]
name = "mlops-zoomcamp-project"
version = "0.3.0"
description = ""
authors = ["Your Name <you@example.com>"]
packages = [{ include = "src" }]

[tool.poetry.dependencies]
python = ">=3.10,<3.13"
scikit-learn = ">=1.3.0"
pandas = ">=2.0.3"
xgboost = ">=1.7.6"
prefect = ">=2.10.21"
optuna = ">=3.2.0"
mlflow = ">=2.5.0"
python-dotenv = ">=1.0.0"
fastapi = ">=0.100.0"
uvicorn = ">=0.23.1"
boto3 = ">=1.28.10"
jinja2 = ">=3.1.2"
python-multipart = ">=0.0.6"
scipy = ">=1.11.3"


[tool.poetry.group.dev.dependencies]
ipykernel = "^6.24.0"
black = "^23.7.0"
pylint = "^2.17.4"
pytest = "^7.4.0"
ruff = "^0.0.291"
coverage = "^7.3.1"
mypy = "^1.5.1"
types-python-dateutil = "^2.8.19.14"
types-jsonschema = "^4.19.0.3"
types-decorator = "^5.1.8.4"
pandas-stubs = "^2.1.1.230928"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.pylint."messages control"]
# Only show warnings with the listed confidence levels. Leave empty to show all.
# Valid levels: HIGH, CONTROL_FLOW, INFERENCE, INFERENCE_FAILURE, UNDEFINED.
confidence = [
    "HIGH",
    "CONTROL_FLOW",
    "INFERENCE",
    "INFERENCE_FAILURE",
    "UNDEFINED",
]

disable = [
    "raw-checker-failed",
    "bad-inline-option",
    "locally-disabled",
    "file-ignored",
    "suppressed-message",
    "useless-suppression",
    "deprecated-pragma",
    "use-symbolic-message-instead",
    "missing-module-docstring",
    "missing-function-docstring",
    "invalid-name",
    "no-name-in-module",
    "missing-class-docstring",
    "too-few-public-methods",
]


[tool.isort]
profile = "black"

[tool.mypy]

[[tool.mypy.overrides]]
module = ["mlflow.*", "sklearn.*", "ruamel.*"]
ignore_missing_imports = true

[tool.coverage.run]
source = ['.']
branch = true


[tool.coverage.report]
show_missing = true
skip_covered = true
fail_under = 100
# Regexes for lines to exclude from consideration
exclude_also = [
    # Don't complain about missing debug-only code:
    "def __repr__",

    # Don't complain if tests don't hit defensive assertion code:
    "raise AssertionError",
    "raise NotImplementedError",

    # Don't complain if non-runnable code isn't run:
    "if False:",
    "if __name__ == .__main__.:",

    # Don't complain about abstract methods, they aren't run:
    "@(abc\\.)?abstractmethod",

    '...',
]
